//----------------------------------------------------------------------------------
// File:        NvVkUtil\src_shaders/graphicFrame.glslc
// SDK Version: v3.00 
// Email:       gameworks@nvidia.com
// Site:        http://developer.nvidia.com/
//
// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------
#GLSL_VS
#version 440 core

// this is set from higher level.  think of it as the upper model matrix
layout(binding = 0) uniform Block {
    mat4 pixelToClipMat;
    vec4 color;
    vec2 thickness;
    vec2 texBorder;
    float alpha;
};

layout(location = 0) in vec2 position;
layout(location = 1) in vec2 tex;
layout(location = 2) in vec2 border;

layout(location = 0) out vec2 tex_coord;

void main()
{
    vec2 invBorder = vec2(1,1) - border;
    vec2 shiftedPosition = (position-thickness*invBorder*position);
    // we need to convert from -1,1 coords into 0,1 coords before xform.
    shiftedPosition *= 0.5;
    shiftedPosition += 0.5;
    // then we multiply like uigraphic normally would
    gl_Position = pixelToClipMat * vec4(shiftedPosition, 0, 1);
    tex_coord = tex + invBorder * -position * texBorder;
}
#GLSL_FS
#version 440 core

// this is set from higher level.  think of it as the upper model matrix
layout(binding = 0) uniform Block {
    mat4 pixelToClipMat;
    vec4 color;
    vec2 thickness;
    vec2 texBorder;
    float alpha;
};

layout(binding = 1)  uniform sampler2D graphicTex;

layout(location = 0) in vec2 tex_coord;

layout(location = 0) out vec4 fragColor;

void main()
{
    fragColor = texture(graphicTex, tex_coord) * vec4(color.r,color.g,color.b,alpha);
}
