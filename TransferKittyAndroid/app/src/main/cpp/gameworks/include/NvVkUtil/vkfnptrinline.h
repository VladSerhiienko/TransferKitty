//----------------------------------------------------------------------------------
// File:        NvVkUtil/vkfnptrinline.h
// SDK Version: v3.00 
// Email:       gameworks@graphics_.com
// Site:        http://developer.nvidia.com/
//
// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------
/*
** Copyright 1998-2015, NVIDIA Corporation.
** All Rights Reserved.
** 
** THE INFORMATION CONTAINED HEREIN IS PROPRIETARY AND CONFIDENTIAL TO
** NVIDIA, CORPORATION.  USE, REPRODUCTION OR DISCLOSURE TO ANY THIRD PARTY
** IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORPORATION.
*/

/* THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT */



#ifndef __vkfnptrinline_h_
#define __vkfnptrinline_h_

#include "vulkannv.h"

#if defined(__cplusplus) || defined(__STDC__)
#define VKINLINE    inline
#else
#define VKINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif
extern PFN_vkQueueSemaphoreWaitNV pfn_vkQueueSemaphoreWaitNV;
static VKINLINE void vkQueueSemaphoreWaitNV(VkQueue queue, VkSemaphore semaphore)
{
    pfn_vkQueueSemaphoreWaitNV(queue, semaphore);
}

extern PFN_vkQueuePresentNV pfn_vkQueuePresentNV;
static VKINLINE void vkQueuePresentNV(VkQueue queue, VkImage image)
{
    pfn_vkQueuePresentNV(queue, image);
}

extern PFN_vkQueuePresentNoWaitNV pfn_vkQueuePresentNoWaitNV;
static VKINLINE void vkQueuePresentNoWaitNV(VkQueue queue, VkImage image)
{
    pfn_vkQueuePresentNoWaitNV(queue, image);
}

extern PFN_vkSignalPresentDoneNV pfn_vkSignalPresentDoneNV;
static VKINLINE void vkSignalPresentDoneNV(VkDevice device, VkSemaphore semaphore, VkFence fence)
{
    pfn_vkSignalPresentDoneNV(device, semaphore, fence);
}

extern PFN_vkCreateInstance pfn_vkCreateInstance;
static VKINLINE VkResult vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance)
{
    return pfn_vkCreateInstance(pCreateInfo, pAllocator, pInstance);
}

extern PFN_vkDestroyInstance pfn_vkDestroyInstance;
static VKINLINE void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyInstance(instance, pAllocator);
}

extern PFN_vkEnumeratePhysicalDevices pfn_vkEnumeratePhysicalDevices;
static VKINLINE VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices)
{
    return pfn_vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
}

extern PFN_vkGetPhysicalDeviceFeatures pfn_vkGetPhysicalDeviceFeatures;
static VKINLINE void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures)
{
    pfn_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
}

extern PFN_vkGetPhysicalDeviceFormatProperties pfn_vkGetPhysicalDeviceFormatProperties;
static VKINLINE void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties *pFormatProperties)
{
    pfn_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
}

extern PFN_vkGetPhysicalDeviceImageFormatProperties pfn_vkGetPhysicalDeviceImageFormatProperties;
static VKINLINE VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties *pImageFormatProperties)
{
    return pfn_vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}

extern PFN_vkGetPhysicalDeviceProperties pfn_vkGetPhysicalDeviceProperties;
static VKINLINE void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties)
{
    pfn_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
}

extern PFN_vkGetPhysicalDeviceQueueFamilyProperties pfn_vkGetPhysicalDeviceQueueFamilyProperties;
static VKINLINE void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties *pQueueFamilyProperties)
{
    pfn_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

extern PFN_vkGetPhysicalDeviceMemoryProperties pfn_vkGetPhysicalDeviceMemoryProperties;
static VKINLINE void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties *pMemoryProperties)
{
    pfn_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
}

extern PFN_vkGetInstanceProcAddr pfn_vkGetInstanceProcAddr;
static VKINLINE PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char *pName)
{
    return pfn_vkGetInstanceProcAddr(instance, pName);
}

extern PFN_vkGetDeviceProcAddr pfn_vkGetDeviceProcAddr;
static VKINLINE PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char *pName)
{
    return pfn_vkGetDeviceProcAddr(device, pName);
}

extern PFN_vkCreateDevice pfn_vkCreateDevice;
static VKINLINE VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDevice *pDevice)
{
    return pfn_vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
}

extern PFN_vkDestroyDevice pfn_vkDestroyDevice;
static VKINLINE void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyDevice(device, pAllocator);
}

extern PFN_vkEnumerateInstanceExtensionProperties pfn_vkEnumerateInstanceExtensionProperties;
static VKINLINE VkResult vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
{
    return pfn_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
}

extern PFN_vkEnumerateDeviceExtensionProperties pfn_vkEnumerateDeviceExtensionProperties;
static VKINLINE VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
{
    return pfn_vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
}

extern PFN_vkEnumerateInstanceLayerProperties pfn_vkEnumerateInstanceLayerProperties;
static VKINLINE VkResult vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties)
{
    return pfn_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
}

extern PFN_vkEnumerateDeviceLayerProperties pfn_vkEnumerateDeviceLayerProperties;
static VKINLINE VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkLayerProperties *pProperties)
{
    return pfn_vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
}

extern PFN_vkGetDeviceQueue pfn_vkGetDeviceQueue;
static VKINLINE void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue)
{
    pfn_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
}

extern PFN_vkQueueSubmit pfn_vkQueueSubmit;
static VKINLINE VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence)
{
    return pfn_vkQueueSubmit(queue, submitCount, pSubmits, fence);
}

extern PFN_vkQueueWaitIdle pfn_vkQueueWaitIdle;
static VKINLINE VkResult vkQueueWaitIdle(VkQueue queue)
{
    return pfn_vkQueueWaitIdle(queue);
}

extern PFN_vkDeviceWaitIdle pfn_vkDeviceWaitIdle;
static VKINLINE VkResult vkDeviceWaitIdle(VkDevice device)
{
    return pfn_vkDeviceWaitIdle(device);
}

extern PFN_vkAllocateMemory pfn_vkAllocateMemory;
static VKINLINE VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo *pAllocateInfo, const VkAllocationCallbacks *pAllocator, VkDeviceMemory *pMemory)
{
    return pfn_vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
}

extern PFN_vkFreeMemory pfn_vkFreeMemory;
static VKINLINE void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkFreeMemory(device, memory, pAllocator);
}

extern PFN_vkMapMemory pfn_vkMapMemory;
static VKINLINE VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void* *ppData)
{
    return pfn_vkMapMemory(device, memory, offset, size, flags, ppData);
}

extern PFN_vkUnmapMemory pfn_vkUnmapMemory;
static VKINLINE void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
{
    pfn_vkUnmapMemory(device, memory);
}

extern PFN_vkFlushMappedMemoryRanges pfn_vkFlushMappedMemoryRanges;
static VKINLINE VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
{
    return pfn_vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

extern PFN_vkInvalidateMappedMemoryRanges pfn_vkInvalidateMappedMemoryRanges;
static VKINLINE VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
{
    return pfn_vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

extern PFN_vkGetDeviceMemoryCommitment pfn_vkGetDeviceMemoryCommitment;
static VKINLINE void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes)
{
    pfn_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
}

extern PFN_vkBindBufferMemory pfn_vkBindBufferMemory;
static VKINLINE VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
{
    return pfn_vkBindBufferMemory(device, buffer, memory, memoryOffset);
}

extern PFN_vkBindImageMemory pfn_vkBindImageMemory;
static VKINLINE VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
{
    return pfn_vkBindImageMemory(device, image, memory, memoryOffset);
}

extern PFN_vkGetBufferMemoryRequirements pfn_vkGetBufferMemoryRequirements;
static VKINLINE void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements)
{
    pfn_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
}

extern PFN_vkGetImageMemoryRequirements pfn_vkGetImageMemoryRequirements;
static VKINLINE void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements)
{
    pfn_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
}

extern PFN_vkGetImageSparseMemoryRequirements pfn_vkGetImageSparseMemoryRequirements;
static VKINLINE void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *pSparseMemoryRequirements)
{
    pfn_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties pfn_vkGetPhysicalDeviceSparseImageFormatProperties;
static VKINLINE void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t *pPropertyCount, VkSparseImageFormatProperties *pProperties)
{
    pfn_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}

extern PFN_vkQueueBindSparse pfn_vkQueueBindSparse;
static VKINLINE VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence)
{
    return pfn_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
}

extern PFN_vkCreateFence pfn_vkCreateFence;
static VKINLINE VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
{
    return pfn_vkCreateFence(device, pCreateInfo, pAllocator, pFence);
}

extern PFN_vkDestroyFence pfn_vkDestroyFence;
static VKINLINE void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyFence(device, fence, pAllocator);
}

extern PFN_vkResetFences pfn_vkResetFences;
static VKINLINE VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences)
{
    return pfn_vkResetFences(device, fenceCount, pFences);
}

extern PFN_vkGetFenceStatus pfn_vkGetFenceStatus;
static VKINLINE VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
{
    return pfn_vkGetFenceStatus(device, fence);
}

extern PFN_vkWaitForFences pfn_vkWaitForFences;
static VKINLINE VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout)
{
    return pfn_vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
}

extern PFN_vkCreateSemaphore pfn_vkCreateSemaphore;
static VKINLINE VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSemaphore *pSemaphore)
{
    return pfn_vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
}

extern PFN_vkDestroySemaphore pfn_vkDestroySemaphore;
static VKINLINE void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroySemaphore(device, semaphore, pAllocator);
}

extern PFN_vkCreateEvent pfn_vkCreateEvent;
static VKINLINE VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkEvent *pEvent)
{
    return pfn_vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
}

extern PFN_vkDestroyEvent pfn_vkDestroyEvent;
static VKINLINE void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyEvent(device, event, pAllocator);
}

extern PFN_vkGetEventStatus pfn_vkGetEventStatus;
static VKINLINE VkResult vkGetEventStatus(VkDevice device, VkEvent event)
{
    return pfn_vkGetEventStatus(device, event);
}

extern PFN_vkSetEvent pfn_vkSetEvent;
static VKINLINE VkResult vkSetEvent(VkDevice device, VkEvent event)
{
    return pfn_vkSetEvent(device, event);
}

extern PFN_vkResetEvent pfn_vkResetEvent;
static VKINLINE VkResult vkResetEvent(VkDevice device, VkEvent event)
{
    return pfn_vkResetEvent(device, event);
}

extern PFN_vkCreateQueryPool pfn_vkCreateQueryPool;
static VKINLINE VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool)
{
    return pfn_vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
}

extern PFN_vkDestroyQueryPool pfn_vkDestroyQueryPool;
static VKINLINE void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyQueryPool(device, queryPool, pAllocator);
}

extern PFN_vkGetQueryPoolResults pfn_vkGetQueryPoolResults;
static VKINLINE VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags)
{
    return pfn_vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}

extern PFN_vkCreateBuffer pfn_vkCreateBuffer;
static VKINLINE VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBuffer *pBuffer)
{
    return pfn_vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
}

extern PFN_vkDestroyBuffer pfn_vkDestroyBuffer;
static VKINLINE void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyBuffer(device, buffer, pAllocator);
}

extern PFN_vkCreateBufferView pfn_vkCreateBufferView;
static VKINLINE VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBufferView *pView)
{
    return pfn_vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
}

extern PFN_vkDestroyBufferView pfn_vkDestroyBufferView;
static VKINLINE void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyBufferView(device, bufferView, pAllocator);
}

extern PFN_vkCreateImage pfn_vkCreateImage;
static VKINLINE VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImage *pImage)
{
    return pfn_vkCreateImage(device, pCreateInfo, pAllocator, pImage);
}

extern PFN_vkDestroyImage pfn_vkDestroyImage;
static VKINLINE void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyImage(device, image, pAllocator);
}

extern PFN_vkGetImageSubresourceLayout pfn_vkGetImageSubresourceLayout;
static VKINLINE void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource *pSubresource, VkSubresourceLayout *pLayout)
{
    pfn_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
}

extern PFN_vkCreateImageView pfn_vkCreateImageView;
static VKINLINE VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImageView *pView)
{
    return pfn_vkCreateImageView(device, pCreateInfo, pAllocator, pView);
}

extern PFN_vkDestroyImageView pfn_vkDestroyImageView;
static VKINLINE void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyImageView(device, imageView, pAllocator);
}

extern PFN_vkCreateShaderModule pfn_vkCreateShaderModule;
static VKINLINE VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule)
{
    return pfn_vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
}

extern PFN_vkDestroyShaderModule pfn_vkDestroyShaderModule;
static VKINLINE void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyShaderModule(device, shaderModule, pAllocator);
}

extern PFN_vkCreatePipelineCache pfn_vkCreatePipelineCache;
static VKINLINE VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache)
{
    return pfn_vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
}

extern PFN_vkDestroyPipelineCache pfn_vkDestroyPipelineCache;
static VKINLINE void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
}

extern PFN_vkGetPipelineCacheData pfn_vkGetPipelineCacheData;
static VKINLINE VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData)
{
    return pfn_vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
}

extern PFN_vkMergePipelineCaches pfn_vkMergePipelineCaches;
static VKINLINE VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches)
{
    return pfn_vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
}

extern PFN_vkCreateGraphicsPipelines pfn_vkCreateGraphicsPipelines;
static VKINLINE VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
{
    return pfn_vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}

extern PFN_vkCreateComputePipelines pfn_vkCreateComputePipelines;
static VKINLINE VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t count, const VkComputePipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
{
    return pfn_vkCreateComputePipelines(device, pipelineCache, count, pCreateInfos, pAllocator, pPipelines);
}

extern PFN_vkDestroyPipeline pfn_vkDestroyPipeline;
static VKINLINE void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyPipeline(device, pipeline, pAllocator);
}

extern PFN_vkCreatePipelineLayout pfn_vkCreatePipelineLayout;
static VKINLINE VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout)
{
    return pfn_vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
}

extern PFN_vkDestroyPipelineLayout pfn_vkDestroyPipelineLayout;
static VKINLINE void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
}

extern PFN_vkCreateSampler pfn_vkCreateSampler;
static VKINLINE VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSampler *pSampler)
{
    return pfn_vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
}

extern PFN_vkDestroySampler pfn_vkDestroySampler;
static VKINLINE void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroySampler(device, sampler, pAllocator);
}

extern PFN_vkCreateDescriptorSetLayout pfn_vkCreateDescriptorSetLayout;
static VKINLINE VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorSetLayout *pSetLayout)
{
    return pfn_vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
}

extern PFN_vkDestroyDescriptorSetLayout pfn_vkDestroyDescriptorSetLayout;
static VKINLINE void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
}

extern PFN_vkCreateDescriptorPool pfn_vkCreateDescriptorPool;
static VKINLINE VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorPool *pDescriptorPool)
{
    return pfn_vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
}

extern PFN_vkDestroyDescriptorPool pfn_vkDestroyDescriptorPool;
static VKINLINE void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
}

extern PFN_vkResetDescriptorPool pfn_vkResetDescriptorPool;
static VKINLINE VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
{
    return pfn_vkResetDescriptorPool(device, descriptorPool, flags);
}

extern PFN_vkAllocateDescriptorSets pfn_vkAllocateDescriptorSets;
static VKINLINE VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo, VkDescriptorSet *pDescriptorSets)
{
    return pfn_vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
}

extern PFN_vkFreeDescriptorSets pfn_vkFreeDescriptorSets;
static VKINLINE VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets)
{
    return pfn_vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
}

extern PFN_vkUpdateDescriptorSets pfn_vkUpdateDescriptorSets;
static VKINLINE void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies)
{
    pfn_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}

extern PFN_vkCreateFramebuffer pfn_vkCreateFramebuffer;
static VKINLINE VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFramebuffer *pFramebuffer)
{
    return pfn_vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
}

extern PFN_vkDestroyFramebuffer pfn_vkDestroyFramebuffer;
static VKINLINE void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyFramebuffer(device, framebuffer, pAllocator);
}

extern PFN_vkCreateRenderPass pfn_vkCreateRenderPass;
static VKINLINE VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
{
    return pfn_vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
}

extern PFN_vkDestroyRenderPass pfn_vkDestroyRenderPass;
static VKINLINE void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyRenderPass(device, renderPass, pAllocator);
}

extern PFN_vkGetRenderAreaGranularity pfn_vkGetRenderAreaGranularity;
static VKINLINE void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity)
{
    pfn_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
}

extern PFN_vkCreateCommandPool pfn_vkCreateCommandPool;
static VKINLINE VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCommandPool *pCommandPool)
{
    return pfn_vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
}

extern PFN_vkDestroyCommandPool pfn_vkDestroyCommandPool;
static VKINLINE void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroyCommandPool(device, commandPool, pAllocator);
}

extern PFN_vkResetCommandPool pfn_vkResetCommandPool;
static VKINLINE VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
{
    return pfn_vkResetCommandPool(device, commandPool, flags);
}

extern PFN_vkAllocateCommandBuffers pfn_vkAllocateCommandBuffers;
static VKINLINE VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo, VkCommandBuffer *pCommandBuffers)
{
    return pfn_vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
}

extern PFN_vkFreeCommandBuffers pfn_vkFreeCommandBuffers;
static VKINLINE void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
{
    pfn_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
}

extern PFN_vkBeginCommandBuffer pfn_vkBeginCommandBuffer;
static VKINLINE VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo)
{
    return pfn_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
}

extern PFN_vkEndCommandBuffer pfn_vkEndCommandBuffer;
static VKINLINE VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
{
    return pfn_vkEndCommandBuffer(commandBuffer);
}

extern PFN_vkResetCommandBuffer pfn_vkResetCommandBuffer;
static VKINLINE VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
{
    return pfn_vkResetCommandBuffer(commandBuffer, flags);
}

extern PFN_vkCmdBindPipeline pfn_vkCmdBindPipeline;
static VKINLINE void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
    pfn_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}

extern PFN_vkCmdSetViewport pfn_vkCmdSetViewport;
static VKINLINE void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports)
{
    pfn_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

extern PFN_vkCmdSetScissor pfn_vkCmdSetScissor;
static VKINLINE void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors)
{
    pfn_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

extern PFN_vkCmdSetLineWidth pfn_vkCmdSetLineWidth;
static VKINLINE void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
    pfn_vkCmdSetLineWidth(commandBuffer, lineWidth);
}

extern PFN_vkCmdSetDepthBias pfn_vkCmdSetDepthBias;
static VKINLINE void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
    pfn_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

extern PFN_vkCmdSetBlendConstants pfn_vkCmdSetBlendConstants;
static VKINLINE void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float *blendConstants)
{
    pfn_vkCmdSetBlendConstants(commandBuffer, blendConstants);
}

extern PFN_vkCmdSetDepthBounds pfn_vkCmdSetDepthBounds;
static VKINLINE void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
    pfn_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

extern PFN_vkCmdSetStencilCompareMask pfn_vkCmdSetStencilCompareMask;
static VKINLINE void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
    pfn_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

extern PFN_vkCmdSetStencilWriteMask pfn_vkCmdSetStencilWriteMask;
static VKINLINE void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
    pfn_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

extern PFN_vkCmdSetStencilReference pfn_vkCmdSetStencilReference;
static VKINLINE void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
    pfn_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
}

extern PFN_vkCmdBindDescriptorSets pfn_vkCmdBindDescriptorSets;
static VKINLINE void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets)
{
    pfn_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

extern PFN_vkCmdBindIndexBuffer pfn_vkCmdBindIndexBuffer;
static VKINLINE void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
    pfn_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

extern PFN_vkCmdBindVertexBuffers pfn_vkCmdBindVertexBuffers;
static VKINLINE void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets)
{
    pfn_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

extern PFN_vkCmdDraw pfn_vkCmdDraw;
static VKINLINE void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
    pfn_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

extern PFN_vkCmdDrawIndexed pfn_vkCmdDrawIndexed;
static VKINLINE void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
    pfn_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

extern PFN_vkCmdDrawIndirect pfn_vkCmdDrawIndirect;
static VKINLINE void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
    pfn_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

extern PFN_vkCmdDrawIndexedIndirect pfn_vkCmdDrawIndexedIndirect;
static VKINLINE void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
    pfn_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

extern PFN_vkCmdDispatch pfn_vkCmdDispatch;
static VKINLINE void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t x, uint32_t y, uint32_t z)
{
    pfn_vkCmdDispatch(commandBuffer, x, y, z);
}

extern PFN_vkCmdDispatchIndirect pfn_vkCmdDispatchIndirect;
static VKINLINE void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
    pfn_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
}

extern PFN_vkCmdCopyBuffer pfn_vkCmdCopyBuffer;
static VKINLINE void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions)
{
    pfn_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

extern PFN_vkCmdCopyImage pfn_vkCmdCopyImage;
static VKINLINE void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions)
{
    pfn_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

extern PFN_vkCmdBlitImage pfn_vkCmdBlitImage;
static VKINLINE void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter)
{
    pfn_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

extern PFN_vkCmdCopyBufferToImage pfn_vkCmdCopyBufferToImage;
static VKINLINE void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions)
{
    pfn_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

extern PFN_vkCmdCopyImageToBuffer pfn_vkCmdCopyImageToBuffer;
static VKINLINE void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions)
{
    pfn_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

extern PFN_vkCmdUpdateBuffer pfn_vkCmdUpdateBuffer;
static VKINLINE void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData)
{
    pfn_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

extern PFN_vkCmdFillBuffer pfn_vkCmdFillBuffer;
static VKINLINE void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
    pfn_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

extern PFN_vkCmdClearColorImage pfn_vkCmdClearColorImage;
static VKINLINE void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
{
    pfn_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

extern PFN_vkCmdClearDepthStencilImage pfn_vkCmdClearDepthStencilImage;
static VKINLINE void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
{
    pfn_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

extern PFN_vkCmdClearAttachments pfn_vkCmdClearAttachments;
static VKINLINE void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects)
{
    pfn_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

extern PFN_vkCmdResolveImage pfn_vkCmdResolveImage;
static VKINLINE void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions)
{
    pfn_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

extern PFN_vkCmdSetEvent pfn_vkCmdSetEvent;
static VKINLINE void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
    pfn_vkCmdSetEvent(commandBuffer, event, stageMask);
}

extern PFN_vkCmdResetEvent pfn_vkCmdResetEvent;
static VKINLINE void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
    pfn_vkCmdResetEvent(commandBuffer, event, stageMask);
}

extern PFN_vkCmdWaitEvents pfn_vkCmdWaitEvents;
static VKINLINE void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
{
    pfn_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

extern PFN_vkCmdPipelineBarrier pfn_vkCmdPipelineBarrier;
static VKINLINE void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
{
    pfn_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

extern PFN_vkCmdBeginQuery pfn_vkCmdBeginQuery;
static VKINLINE void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
    pfn_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
}

extern PFN_vkCmdEndQuery pfn_vkCmdEndQuery;
static VKINLINE void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
    pfn_vkCmdEndQuery(commandBuffer, queryPool, query);
}

extern PFN_vkCmdResetQueryPool pfn_vkCmdResetQueryPool;
static VKINLINE void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
    pfn_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

extern PFN_vkCmdWriteTimestamp pfn_vkCmdWriteTimestamp;
static VKINLINE void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
    pfn_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

extern PFN_vkCmdCopyQueryPoolResults pfn_vkCmdCopyQueryPoolResults;
static VKINLINE void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
    pfn_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

extern PFN_vkCmdPushConstants pfn_vkCmdPushConstants;
static VKINLINE void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues)
{
    pfn_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

extern PFN_vkCmdBeginRenderPass pfn_vkCmdBeginRenderPass;
static VKINLINE void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents)
{
    pfn_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

extern PFN_vkCmdNextSubpass pfn_vkCmdNextSubpass;
static VKINLINE void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
    pfn_vkCmdNextSubpass(commandBuffer, contents);
}

extern PFN_vkCmdEndRenderPass pfn_vkCmdEndRenderPass;
static VKINLINE void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
    pfn_vkCmdEndRenderPass(commandBuffer);
}

extern PFN_vkCmdExecuteCommands pfn_vkCmdExecuteCommands;
static VKINLINE void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
{
    pfn_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

extern PFN_vkGetPhysicalDeviceSurfaceSupportKHR pfn_vkGetPhysicalDeviceSurfaceSupportKHR;
static VKINLINE VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported)
{
    return pfn_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
}

extern PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
static VKINLINE VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *pSurfaceCapabilities)
{
    return pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
}

extern PFN_vkGetPhysicalDeviceSurfaceFormatsKHR pfn_vkGetPhysicalDeviceSurfaceFormatsKHR;
static VKINLINE VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats)
{
    return pfn_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}

extern PFN_vkGetPhysicalDeviceSurfacePresentModesKHR pfn_vkGetPhysicalDeviceSurfacePresentModesKHR;
static VKINLINE VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes)
{
    return pfn_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
}

extern PFN_vkCreateSwapchainKHR pfn_vkCreateSwapchainKHR;
static VKINLINE VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain)
{
    return pfn_vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
}

extern PFN_vkDestroySwapchainKHR pfn_vkDestroySwapchainKHR;
static VKINLINE void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator)
{
    pfn_vkDestroySwapchainKHR(device, swapchain, pAllocator);
}

extern PFN_vkGetSwapchainImagesKHR pfn_vkGetSwapchainImagesKHR;
static VKINLINE VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount, VkImage *pSwapchainImages)
{
    return pfn_vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
}

extern PFN_vkAcquireNextImageKHR pfn_vkAcquireNextImageKHR;
static VKINLINE VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex)
{
    return pfn_vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
}

extern PFN_vkQueuePresentKHR pfn_vkQueuePresentKHR;
static VKINLINE VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo)
{
    return pfn_vkQueuePresentKHR(queue, pPresentInfo);
}



void vkLoadProcs(PFN_vkGetProcAddressNV getProc);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __vkfnptrinline_h_
